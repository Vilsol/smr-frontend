{"version":3,"file":"VersionForm.BLAmYJpr.js","sources":["../../../../../../src/lib/models/versions.ts","../../../../../../src/lib/components/versions/VersionForm.svelte"],"sourcesContent":["import * as zod from 'zod';\nimport JSZip from 'jszip';\nimport { validateUPluginJson } from '$lib/utils/uplugin';\nimport type { Writable } from 'svelte/store';\nimport type { ZodObject, ZodRawShape } from 'zod';\nimport type { File } from '$lib/models/file';\nimport type { VersionStabilities } from '$lib/generated';\nimport { TargetName } from '$lib/generated/graphql';\n\nexport type VersionData = {\n  file: File;\n  changelog: string;\n  stability: VersionStabilities;\n};\n\nexport type VersionMetadata = {\n  uplugin: {\n    Version: string;\n    SemVersion?: string;\n    GameVersion?: string;\n    Plugins?: {\n      Name: string;\n      SemVersion?: string;\n      BasePlugin?: boolean;\n      Optional?: boolean;\n    }[];\n  };\n  objects: string[];\n  targets: string[];\n};\n\nconst ALLOWED_TARGETS = Object.keys(TargetName)\n  .map((key) => TargetName[key])\n  .filter((value) => typeof value === 'string') as TargetName[];\n\nconst readUPluginJson = async (\n  uPluginJson: string,\n  modReference: string\n): Promise<{ [key: string]: unknown } | VersionMetadata['uplugin']> => {\n  const result = await validateUPluginJson(uPluginJson);\n\n  if (result.length != 0) {\n    return {\n      message: `invalid ${modReference}.uplugin`,\n      extended: result\n    };\n  }\n\n  const parsed = JSON.parse(uPluginJson) as VersionMetadata['uplugin'];\n\n  const hasSMLDependency = parsed.Plugins?.some((plugin) => plugin.Name === 'SML');\n  const hasGameVersion = !!parsed.GameVersion;\n\n  if (!hasSMLDependency && !hasGameVersion) {\n    return {\n      message: `either GameVersion or SML dependency must be present in ${modReference}.uplugin`\n    };\n  }\n\n  return parsed;\n};\n\nfunction basename(path: string): string {\n  const parts = path.split('/');\n  return parts[parts.length - 1];\n}\n\nfunction dirname(path: string): string {\n  const parts = path.split('/');\n  return parts.slice(0, parts.length - 1).join('/');\n}\n\nconst validateModZip = async (\n  file: unknown,\n  modReference: string\n): Promise<{ [key: string]: unknown } | VersionMetadata> => {\n  const zipper = new JSZip();\n  return (\n    zipper\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      .loadAsync(file as any)\n      .then(async (zip) => {\n        const uPluginFiles = zip.filter((filePath) => basename(filePath) == modReference + '.uplugin');\n\n        if (uPluginFiles.length === 0) {\n          return {\n            message: 'Mod does not contain any ' + modReference + '.uplugin files'\n          };\n        }\n\n        if (uPluginFiles.length === 1 && uPluginFiles[0].name === modReference + '.uplugin') {\n          // Single-target mod\n          const uPluginData = await readUPluginJson(await uPluginFiles[0].async('string'), modReference);\n\n          if ('message' in uPluginData) {\n            return uPluginData;\n          }\n\n          return {\n            uplugin: uPluginData,\n            objects: Object.keys(zip.files).filter(\n              (f) => f.endsWith('.so') || f.endsWith('.dll') || f.endsWith('.pak')\n            ),\n            targets: ['Windows']\n          };\n        }\n\n        // Multi-target mod\n        if (uPluginFiles.some((f) => f.name === modReference + '.uplugin')) {\n          return {\n            message:\n              'Mod contains ' +\n              modReference +\n              '.uplugin files in the root directory. New uploads must use the multi-target format. Read more on the docs: https://docs.ficsit.app/satisfactory-modding/latest/Development/UpdatingToDedi.html'\n          };\n        }\n\n        const targets = uPluginFiles.map((f) => dirname(f.name));\n\n        const invalidTargets = targets.filter((t) => !ALLOWED_TARGETS.includes(t as TargetName));\n        if (invalidTargets.length !== 0) {\n          return {\n            message: `invalid target(s): ${invalidTargets.join(', ')}`\n          };\n        }\n\n        const outsideFiles = zip.filter((filePath) => !targets.some((target) => filePath.startsWith(target + '/')));\n        if (outsideFiles.length !== 0) {\n          return {\n            message: `file(s) outside target directories: ${outsideFiles.map((f) => f.name).join(', ')}`\n          };\n        }\n\n        const uPluginFilesData = await Promise.all(\n          uPluginFiles.map((f) =>\n            f.async('string').catch((err) => {\n              // Will be caught by the .catch below\n              throw new Error(`invalid ${modReference}.uplugin: ${err}`);\n            })\n          )\n        );\n\n        if (!uPluginFilesData.every((f) => f === uPluginFilesData[0])) {\n          return {\n            message: 'Mod contains ' + modReference + '.uplugin files with different contents'\n          };\n        }\n\n        // Since the .uplugin files are all the same, we only need to parse one\n        const uPluginData = await readUPluginJson(uPluginFilesData[0], modReference);\n\n        if ('message' in uPluginData) {\n          return uPluginData;\n        }\n\n        return {\n          uplugin: uPluginData,\n          objects: Object.keys(zip.files).filter((f) => f.endsWith('.so') || f.endsWith('.dll') || f.endsWith('.pak')),\n          targets\n        };\n      })\n      .catch((err) => ({\n        message: 'invalid zip/smod file: ' + err\n      }))\n  );\n};\n\nexport const constructVersionSchema = (\n  modReference: string,\n  modMetadata: Writable<VersionMetadata>\n): ZodObject<ZodRawShape> =>\n  zod.object({\n    file: zod.optional(\n      zod.any().superRefine(async (file, ctx) => {\n        if (!('name' in file && 'size' in file && 'type' in file)) {\n          ctx.addIssue({\n            message: 'Unknown file error',\n            code: zod.ZodIssueCode.custom\n          });\n          return;\n        }\n\n        const result = await validateModZip(file, modReference);\n\n        if ('message' in result) {\n          ctx.addIssue({\n            message: result.message as string,\n            code: zod.ZodIssueCode.custom\n          });\n          return;\n        }\n\n        modMetadata.set(result as VersionMetadata);\n      })\n    ),\n    changelog: zod.string(),\n    stability: zod.string()\n  });\n","<script lang=\"ts\">\n  import { createForm } from 'felte';\n  import { validator } from '@felte/validator-zod';\n  import { reporter, ValidationMessage } from '@felte/reporter-svelte';\n  import type { VersionData, VersionMetadata } from '$lib/models/versions';\n  import { constructVersionSchema } from '$lib/models/versions';\n  import { trimNonSchema } from '$lib/utils/forms';\n  import { markdown } from '$lib/utils/markdown';\n  import { writable } from 'svelte/store';\n  import { VersionStabilities } from '$lib/generated';\n  import { prettyBytes } from '$lib/utils/formatting';\n  import { getTranslate } from '@tolgee/svelte';\n\n  export const { t } = getTranslate();\n\n  export let modReference: string;\n  export let onSubmit: (data: VersionData) => Promise<void>;\n  export let initialValues: Omit<VersionData, 'file'> = {\n    changelog: '',\n    stability: VersionStabilities.Release\n  };\n  export let submitIcon: string;\n  export let submitText = $t('entry.create');\n\n  export let editing = false;\n\n  const modMeta = writable<VersionMetadata>();\n\n  let disabled = false;\n\n  const versionSchema = constructVersionSchema(modReference, modMeta);\n  const { form, data } = createForm<VersionData>({\n    initialValues: initialValues as VersionData,\n    extend: [validator({ schema: versionSchema }), reporter],\n    onSubmit: (submitted: VersionData) => {\n      disabled = true;\n      onSubmit(trimNonSchema(submitted, versionSchema)).then(() => (disabled = false));\n    }\n  });\n\n  $: preview = ($data.changelog as string) || '';\n  $: dependencies = $modMeta?.uplugin?.Plugins?.filter((d) => !d.BasePlugin) || [];\n</script>\n\n<form use:form>\n  <div class=\"grid grid-flow-row gap-6\">\n    {#if !editing}\n      <div class=\"grid grid-flow-row gap-2\">\n        <label for=\"file\">{$t('file')} *</label>\n        <input id=\"file\" class=\"base-input\" name=\"file\" type=\"file\" accept=\".zip,.smod\" placeholder=\"File\" />\n        <ValidationMessage for=\"file\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n\n      {#if $data.file}\n        <div>\n          <span><strong>{$t('file-type')}:</strong> {$data.file.type || 'Unknown'}</span><br />\n          <span><strong>{$t('file-size')}:</strong> {prettyBytes($data.file.size)}</span>\n        </div>\n      {/if}\n\n      {#if $modMeta}\n        <div>\n          <p class=\"mb-4\">\n            <span><strong>{$t('version')}:</strong> {$modMeta.uplugin.Version}<br /></span>\n\n            {#if $modMeta.uplugin.SemVersion !== undefined}\n              <span><strong>SemVersion:</strong> {$modMeta.uplugin.SemVersion}<br /></span>\n            {:else}\n              <span class=\"text-yellow-600\">\n                {$t('version-form.missing-sem-version')}\n                {$modMeta.uplugin.Version}.0.0\n              </span>\n            {/if}\n\n            {#if $modMeta.uplugin.GameVersion !== undefined}\n              <span><strong>Game version:</strong> {$modMeta.uplugin.GameVersion}<br /></span>\n            {:else}\n              <span class=\"text-yellow-600\">\n                {$t('version-form.missing-game-version')}\n              </span>\n            {/if}\n          </p>\n\n          <span><strong>Targets:</strong> {$modMeta.targets.join(', ')}<br /></span>\n\n          {#if $modMeta.uplugin.Plugins !== undefined}\n            <p>\n              <strong>{$t('dependencies')}:</strong><br />\n              {#each dependencies as dependency}\n                <strong>{dependency.Name}: </strong>\n                {#if dependency.SemVersion}\n                  <span>{dependency.SemVersion}</span>\n                {:else}\n                  <span>*</span>\n                {/if}\n                <br />\n              {/each}\n            </p>\n          {/if}\n\n          {#if $modMeta.objects && $modMeta.objects.length > 0}\n            <p>\n              <strong>{$t('objects')}:</strong><br />\n              {#each $modMeta.objects as object}\n                <span>{object}</span>\n                <br />\n              {/each}\n            </p>\n          {:else}\n            <p>\n              <span class=\"text-yellow-600\">\n                {$t('version-form.missing-sem-version')}\n              </span>\n            </p>\n          {/if}\n        </div>\n      {/if}\n    {/if}\n\n    <div class=\"split grid gap-6\">\n      <div class=\"grid grid-flow-row auto-rows-max gap-2\">\n        <label class=\"label\">\n          <span>{$t('changelog')} *</span>\n          <textarea class=\"vertical-textarea textarea p-2\" bind:value={$data.changelog} required rows={10} />\n        </label>\n        <ValidationMessage for=\"changelog\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n      <div class=\"grid grid-flow-row auto-rows-max gap-2\">\n        <span>{$t('preview')}:</span>\n        {#await markdown(preview) then previewRendered}\n          <!-- eslint-disable-next-line -->\n          <div class=\"markdown-content right\">{@html previewRendered}</div>\n        {/await}\n      </div>\n    </div>\n\n    <div class=\"text-muted\">\n      {$t('version-form.agreement-to')} <a href=\"/content-policy\">{$t('content-policy')}</a>.\n    </div>\n\n    <div>\n      <button class=\"variant-ghost-primary btn\" type=\"submit\" {disabled}>\n        <span class=\"material-icons pr-2\">{submitIcon}</span>\n        {submitText}\n      </button>\n    </div>\n  </div>\n</form>\n\n<style lang=\"postcss\">\n  .split {\n    grid-template-columns: 50% 50%;\n\n    & .right {\n      max-height: 75vh;\n      overflow: auto;\n    }\n  }\n\n  a {\n    @apply text-yellow-500 underline;\n  }\n</style>\n"],"names":["ALLOWED_TARGETS","Object","keys","TargetName","map","key","filter","value","readUPluginJson","async","uPluginJson","modReference","result","validateUPluginJson","length","message","extended","parsed","JSON","parse","hasSMLDependency","Plugins","some","plugin","Name","hasGameVersion","GameVersion","basename","path","parts","split","dirname","slice","join","validateModZip","file","JSZip","loadAsync","then","zip","uPluginFiles","filePath","name","uPluginData","uplugin","objects","files","f","endsWith","targets","invalidTargets","t","includes","outsideFiles","target","startsWith","uPluginFilesData","Promise","all","catch","err","Error","every","i","constructVersionSchema","modMetadata","zod.object","zod.optional","zod.any","superRefine","ctx","addIssue","code","zod.ZodIssueCode","custom","set","changelog","zod.string","stability","t0_value","if_block0","create_if_block_7","create_if_block_1","insert_hydration_dev","div","anchor","append_hydration_dev","label","input","current","dirty","set_data_dev","t0","t_1_value","span","t_1","t3_value","type","t5_value","t8_value","prettyBytes","size","span0","strong0","br","span1","strong1","t3","t5","t8","Version","t9_value","SemVersion","undefined","create_if_block_6","create_if_block_5","if_block2","create_if_block_3","create_if_block_2","p","br0","br1","t9","t2","t2_value","strong","create_if_block_4","each_value","ensure_array_like_dev","html_tag","raw_value","t1_value","t6_value","t10_value","t12_value","create_if_block","handle_promise","promise","markdown","info","form_1","div5","div2","div0","textarea","set_input_value","div1","div3","a","div4","button","span2","t1","t6","t10","t12","getTranslate","$$props","onSubmit","initialValues","VersionStabilities","Release","submitIcon","submitText","$t","editing","modMeta","writable","disabled","versionSchema","form","data","createForm","extend","validator","schema","reporter","submitted","$$invalidate","trimNonSchema","$data","this","preview","dependencies","$modMeta","d","BasePlugin"],"mappings":"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"}