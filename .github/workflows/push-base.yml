name: Base

on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string

env:
  NODE_VERSION: "16"
  PNPM_VERSION: "7.2.1"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        action: [ "build:node", "build:static" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup nodejs
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache pnpm modules
        uses: actions/cache@v2
        env:
          cache-name: cache-pnpm-modules
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-build-${{ env.cache-name }}-16-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-16-

      - name: Install dependencies
        uses: pnpm/action-setup@v2.2.2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: true

      - name: Build
        run: |
          set -o allexport; source .env.${{ inputs.env }}; set +o allexport
          pnpm graphql-codegen && pnpm ${{ matrix.action }}
        env:
          NODE_ENV: ${{ inputs.env }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup nodejs
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache pnpm modules
        uses: actions/cache@v2
        env:
          cache-name: cache-pnpm-modules
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-build-${{ env.cache-name }}-16-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-16-

      - name: Install dependencies
        uses: pnpm/action-setup@v2.2.2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: true

      - name: Lint
        run: |
          set -o allexport; source .env.${{ inputs.env }}; set +o allexport
          pnpm exec svelte-kit sync && pnpm graphql-codegen && pnpm check && pnpm lint
        env:
          NODE_ENV: ${{ inputs.env }}

  pages:
    name: Pages
    runs-on: ubuntu-latest
    needs:
      - build
      - lint
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup nodejs
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache pnpm modules
        uses: actions/cache@v2
        env:
          cache-name: cache-pnpm-modules
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-build-${{ env.cache-name }}-16-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-16-

      - name: Install dependencies
        uses: pnpm/action-setup@v2.2.2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: true

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      - name: Build
        run: |
          set -o allexport; source .env.${{ inputs.env }}; set +o allexport
          pnpm graphql-codegen && pnpm build:static
        env:
          SVELTE_BASE_PATH: "/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}/${{ env.GITHUB_REF_SLUG }}"
          NODE_ENV: ${{ inputs.env }}

      - name: Deploy to pages
        uses: JamesIves/github-pages-deploy-action@4.1.0
        with:
          branch: gh-pages
          folder: build/static
          target-folder: ${{ env.GITHUB_REF_SLUG }}

  image:
    name: Image
    runs-on: ubuntu-latest
    needs:
      - build
      - lint
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/${{ github.repository }}
          flavor: |
            latest=false
            suffix=-${{ inputs.env }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_ENV_ARG=${{ inputs.env }}
